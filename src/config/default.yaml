# --- Defaults ---

# --- pymarl options ---
runner: "episode" # Runs 1 env for an episode
mac: "basic_mac" # Basic controller
env: "sc2" # Environment name
env_args: {} # Arguments for the environment
batch_size_run: 1 # Number of environments to run in parallel
test_nepisode: 20 # Number of episodes to test for
test_interval: 2000 # Test after {} timesteps have passed
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0
log_interval: 2000 # Log summary of stats after every {} timesteps
runner_log_interval: 2000 # Log runner stats (not test stats) every {} timesteps
learner_log_interval: 2000 # Log training stats every {} timesteps
t_max: 10000 # Stop running after this many timesteps
use_cuda: True # Use gpu by default unless it isn't available
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram

# --- Logging options ---
use_tensorboard: False # Log results to tensorboard
save_model: False # Save the models to disk
save_model_interval: 500000 # Save models after this many timesteps
checkpoint_path: "" # Load a checkpoint from this path
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
save_replay: False # Saving the replay of the model loaded from checkpoint_path
local_results_path: "results" # Path for local results

# --- RL hyperparameters ---
gamma: 0.99
batch_size: 32 # Number of episodes to train on
buffer_size: 32 # Size of the replay buffer
lr: 0.0005 # Learning rate for agents
optim_alpha: 0.99 # RMSProp alpha
optim_eps: 0.00001 # RMSProp epsilon
grad_norm_clip: 10 # Reduce magnitude of gradients above this L2 norm
add_value_last_step: True

# --- Agent parameters ---
agent: "rnn" # Default rnn agent
hidden_dim: 64 # Size of hidden state for default rnn agent
obs_agent_id: True # Include the agent's one_hot id in the observation
obs_last_action: True # Include the agent's last action (one_hot) in the observation
# use the Q_Learner to train
standardise_returns: False
standardise_rewards: True
# config for state encoder
encoder_use_rnn: True
encoder_hidden_dim: 32
ae_enc_hidden_dims: []
ae_dec_hidden_dims: []
attn_embed_dim: 16
concat_obs: True
state_repre_dim: 8
action_embed_dim: 8
state_encoder: ob_attn_ae
ob_embed_dim: 32
momentum_tau: 1
# configs about whether to use latent model learning
use_latent_model: True
use_rew_pred: True
use_momentum_encoder: True
use_residual: True
pred_len: 2
latent_model: mlp
model_hidden_dim: 64
spr_dim: 32
rl_signal: True
# config for trade-off among different losses
spr_coef: 1
rew_pred_coef: 1
repr_coef: 1
# config about encoder testing/visualization
test_encoder: False
# config for robust communication
noise_env: False
noise_type: 0 # 噪声类别分为0、1、2，分别表示发送方添加噪声、接收方全部添加和接收方部分添加 
prob: 0

# --- Experiment running params ---
repeat_id: 1
label: "default_label"
hypergroup: null
remark: "remark"